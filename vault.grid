#!/usr/bin/env perl

use strict;
use warnings;

# *  8  -  D(1)
# 4  *  11 *
# +  4  -  18
# P  -  9  *

# solution 1: N E E N W S E E W N N E
# code: qo8HqHOwU8Wi

my $graph = [
	['P', 1, 9, 3],
	[2, 4, 1, 18],
	[4, 3, 11, 3],
	[3, 8, 1, 1],
];

use Data::Dumper;

my $distance = 99;
my $total_matches = 0;
my $winner = [];

my $rounds = 0;
while ($rounds < 100000000) {
	$rounds++;
	print "\rRound: $rounds\tTotal Matches: $total_matches" unless $rounds % 100;
	my $value = walk();
	next unless ref $value;
	my $score = scalar @$value;
	$total_matches++;
	if ($score < $distance) {
		print "\nFound a match with score: $score\n";
		$distance = $score;
		$winner = $value;
	}
}

print Dumper $winner;

sub walk {
	my @pos = (0,0);
	my $score = 22;
	my $op = 0;
	my $moves = [];

	while ($pos[0] != 3 || $pos[1] != 3) {
		my $xory = rand() > .5 ? 1 : 0;
		my $move = rand() > .5 ? 1 : -1;
		my $newval = $pos[$xory] + $move;
		next if $newval < 0;
		next if $newval > 3;
		next if $newval == 0 and $pos[1-$xory] == 0;
		push @$moves, [$xory, $move];
		return if scalar @$moves > $distance;
		$pos[$xory] = $newval;
		my $curval = $graph->[$pos[0]]->[$pos[1]];

		if ($op == 0) {
			$op = $curval;
		} else {
			if ($op == 1) {
				$score -= $curval;
			} elsif ($op == 2) {
				$score += $curval;
			} elsif ($op == 3) {
				$score *= $curval;
			}
			$op = 0;
		}
	}

	if ($op == 1) {
		$score -= 1;
	}

	return $moves if $score == 30;
	return 0;
}
